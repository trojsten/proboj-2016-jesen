/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Point;
import java.util.ArrayList;

/**
 *
 * @author siegrift
 */
public class Observer extends javax.swing.JPanel {

    /**
     * Creates new form Observer
     */
    int data[][][];
    int N, M;
    int PIXEL_SIZE = 50;
    ArrayList<Color> playerColors;
    int playerHeads[][];
    int alive[];

    public static final int SNAKE_INDEX = 0;
    public static final int AREA_INDEX = 1;
    public static final int WALL_INDEX = 2;

    final int UNDEFINED = -1;
    final int SNAKE_HEAD = 1000;

    final int IS_WALL = 1;
    final Color WALL_COLOR = new Color(0, 0, 0, (float) 0.5);
    final float AREA_TRANSPARENCY = (float) 0.5;

    final int PLAYER_DEAD = 0;

    public Observer() {
        initComponents();
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g); //To change body of generated methods, choose Tools | Templates.
        g.setColor(Color.GRAY);
        g.fillRect(0, 0, getWidth(), getHeight());

        PIXEL_SIZE = Math.min(getHeight() / N, getWidth() / M);
        int xoffset = (getWidth() - N * PIXEL_SIZE) / 2;
        int yoffset = (getHeight() - M * PIXEL_SIZE) / 2;

        for (int i = 0; i < N; i++) {
            for (int j = 0; j < M; j++) {
                boolean allUndef = true;
                for (int k = 0; k < 3; k++) {
                    if(data[i][j][k] != UNDEFINED)allUndef = false;
                }
                if(allUndef){
                    g.setColor(Color.WHITE);
                    g.fillRect(i * PIXEL_SIZE, j * PIXEL_SIZE, PIXEL_SIZE, PIXEL_SIZE);
                }

                if (data[i][j][WALL_INDEX] == IS_WALL) {
                    g.setColor(WALL_COLOR);
                    g.fillRect(i * PIXEL_SIZE, j * PIXEL_SIZE, PIXEL_SIZE, PIXEL_SIZE);
                }
                if (data[i][j][AREA_INDEX] != UNDEFINED) {
                    Color c = playerColors.get(data[i][j][AREA_INDEX]);
                    g.setColor(new Color(c.getRed(), c.getGreen(), c.getBlue(), AREA_TRANSPARENCY));
                    g.fillRect(i * PIXEL_SIZE, j * PIXEL_SIZE, PIXEL_SIZE, PIXEL_SIZE);
                }
                if (data[i][j][SNAKE_INDEX] >= SNAKE_HEAD) {
                    g.setColor(playerColors.get(data[i][j][SNAKE_INDEX] - SNAKE_HEAD).darker().darker());
                    g.fillRect(i * PIXEL_SIZE, j * PIXEL_SIZE, PIXEL_SIZE, PIXEL_SIZE);
                } else if (data[i][j][SNAKE_INDEX] != UNDEFINED) {
                    g.setColor(playerColors.get(data[i][j][SNAKE_INDEX]));
                    g.fillRect(i * PIXEL_SIZE, j * PIXEL_SIZE, PIXEL_SIZE, PIXEL_SIZE);
                }
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    synchronized void setData(int[][][] dat, int[][] heads, int[] live) {
        data = dat.clone();
        playerHeads = heads.clone();
        alive = live.clone();
        for (int i = 0; i < playerHeads.length; i++) {
            int x = playerHeads[i][0], y = playerHeads[i][1];
            if (x < 0 || y < 0 || x >= N || y >= M || alive[i] == PLAYER_DEAD) {
                continue;
            }
            data[x][y][SNAKE_INDEX] = SNAKE_HEAD + i;
        }
    }

    void initData(ArrayList<Color> cols, int n, int m) {
        playerColors = cols;
        data = new int[n][m][3];
        N = n;
        M = m;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
